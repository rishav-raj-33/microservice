package com.student.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.student.collections.Student;
import com.student.service.KafkaService;
import com.student.service.StudentService;

@RestController
@RequestMapping("/api/students/")
public class StudentController {
	
	@Autowired
	private KafkaService kafkaService;
	
	@Autowired
	private StudentService service;
	
	private static final Logger logger = LoggerFactory.getLogger(StudentController.class);
	
	
	
	@PostMapping("/")
	public ResponseEntity<Student> createStudent(@RequestBody Student student){
		return new ResponseEntity<>(service.saveStudent(student),HttpStatus.CREATED);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Student> updateStudent(@RequestBody Student student,@PathVariable Integer id){
		return new ResponseEntity<>(service.updateStudent(id,student),HttpStatus.CREATED);
	}
	@DeleteMapping("/{id}")
	public ResponseEntity<Boolean> deleteStudent(@PathVariable Integer id){
		return new ResponseEntity<>(service.deleteStudent(id),HttpStatus.CREATED);
	}
	@GetMapping("/{id}")
	public ResponseEntity<Student> getStudent(@PathVariable Integer id){
		return new ResponseEntity<>(service.getStudentByRollNo(id),HttpStatus.CREATED);
	}
	
	@GetMapping
	public ResponseEntity<List<Student>> getAllStudent(){
		return null;
	}
	
	@PostMapping("verify")
	public ResponseEntity<Void> getVerification(@RequestBody String message){
		logger.info(message);
		return ResponseEntity.ok().build();
	}
	

	
	
	
	
	
	
	
	
}
